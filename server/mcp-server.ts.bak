// server/mcp-server.ts
import express from 'express';
import { randomUUID } from 'crypto';
import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';
import { StreamableHTTPServerTransport } from '@modelcontextprotocol/sdk/server/streamableHttp.js';

async function main() {
  const server = new McpServer({ name: 'MCP_plugin', version: '1.0.0' });
  const app = express();
  app.use(express.json());

  const transports: Record<string, StreamableHTTPServerTransport> = {};

  app.all('/mcp', async (req, res) => {
    const sessionId = req.headers['mcp-session-id'] as string | undefined;
    let transport = sessionId ? transports[sessionId] : undefined;

    if (!transport) {
      transport = new StreamableHTTPServerTransport({
        sessionIdGenerator: () => randomUUID(),
        onsessioninitialized: (id: string) => { transports[id] = transport!; }
      });
      transport.onclose = () => {
        if (transport!.sessionId) delete transports[transport!.sessionId];
      };
    }

    await server.connect(transport);
    await transport.handleRequest(req, res, req.body);
  });

  const port = process.env.PORT ? parseInt(process.env.PORT, 10) : 8083;
  app.listen(port, () => {
    console.log(`âœ… MCP server listening on http://localhost:${port}/mcp`);
  });
}

main().catch(console.error);
